from random import randrange
from turtle import *
from freegames import square, vector

# -------------------------
# CONFIG GLOBALES
# -------------------------
food = vector(0, 0)
snake = [vector(10, 0)]
aim = vector(10, 0)
score = 0
game_mode = None    # 'score', 'time', 'infinite', 'survival'
snake_color = "white"
enemies = []
speed = 120
game_over = False
lose_reason = ""
state = "menu"      # 'menu', 'color', 'game', 'gameover'
buttons = []        # [(x1,y1,x2,y2, action)]

# -------------------------
# UTILIDAD UI
# -------------------------
def set_vintage_style():
    bgcolor("black")
    pencolor("white")

def draw_button(cx, cy, w, h, text, action):
    """Dibuja un botón centrado en (cx,cy) y lo registra para clic."""
    global buttons
    x1, y1 = cx - w/2, cy - h/2
    x2, y2 = cx + w/2, cy + h/2

penup(); goto(x1, y1); pendown()
    color("white")
    for _ in range(2):
        forward(w); left(90); forward(h); left(90)
    penup()
    goto(cx, cy - 8)  # texto centrado aprox.
    write(text, align="center", font=("Courier", 12, "normal"))

    buttons.append((x1, y1, x2, y2, action))

def clear_buttons():
    global buttons
    buttons = []

def handle_click(x, y):
    """Handler global de clics: revisa si tocaste algún botón activo."""
    for (x1, y1, x2, y2, action) in buttons:
        if x1 <= x <= x2 and y1 <= y <= y2:
            action()
            break

# -------------------------
# DIRECCIONES
# -------------------------
def change(x, y):
    global aim
    if state == "game" and not game_over:
        aim.x = x
        aim.y = y

def inside(head):
    return -200 < head.x < 200 and -200 < head.y < 200

# -------------------------
# ENEMIGOS (MODO SURVIVAL)
# -------------------------
def move_enemies():
    for e in enemies:
        if snake[-1].x < e.x: e.x -= 10
        elif snake[-1].x > e.x: e.x += 10
        if snake[-1].y < e.y: e.y -= 10
        elif snake[-1].y > e.y: e.y += 10

# -------------------------
# BORDES
# -------------------------
def draw_border():
    """Dibuja un borde blanco alrededor del tablero."""
    penup()
    goto(-200, -200)
    pendown()
    color("white")
    for _ in range(4):
        forward(400)
        left(90)
    penup()

# -------------------------
# PANTALLAS
# -------------------------
def show_menu():
    global state
    clear(); clear_buttons()
    penup(); color("white")
    goto(0, 130); write("=== SNAKE RETRO ===", align="center", font=("Courier", 18, "bold"))
    goto(0, 95);  write("Elige modo:", align="center", font=("Courier", 14, "normal"))

    # Botones (modo)
    draw_button(0, 60, 360, 28, "Puntaje — clásico infinito", lambda: set_mode("score"))
    draw_button(0, 25, 360, 28, "Contrarreloj — 90s máxima puntuación", lambda: set_mode("time"))
    draw_button(0, -10, 360, 28, "Infinito (Pac-Man) — atraviesa paredes, +velocidad al comer", lambda: set_mode("infinite"))
    draw_button(0, -45, 360, 28, "Survival — enemigos te persiguen", lambda: set_mode("survival"))

    goto(0, -95); write("Haz clic en un modo para continuar", align="center", font=("Courier", 12, "normal"))

    listen(); update()
    onscreenclick(handle_click)
def show_color_menu():
    global state
    clear(); clear_buttons()
    penup(); color("white")
    goto(0, 90); write("Elige color de la serpiente", align="center", font=("Courier", 16, "bold"))

    draw_button(0, 40, 220, 28, "Blanco", lambda: set_color_and_start("white"))
    draw_button(0, 5, 220, 28, "Verde neón", lambda: set_color_and_start("lime"))
    draw_button(0, -30, 220, 28, "Rojo", lambda: set_color_and_start("red"))

    goto(0, -80); write("Haz clic en un color", align="center", font=("Courier", 12, "normal"))

    state = "color"
    listen(); update()
    onscreenclick(handle_click)

def show_restart_screen():
    global state, game_over
    clear(); clear_buttons()
    penup(); color("white")
    goto(0, 60);  write(f"Has perdido: {lose_reason}", align="center", font=("Courier", 14, "normal"))
    goto(0, 30);  write(f"Score final: {score}", align="center", font=("Courier", 14, "normal"))

    draw_button(-60, -20, 100, 30, "   Sí   ", restart_game)
    draw_button( 60, -20, 100, 30, "   No   ", exit_game)

    goto(0, -70); write("Haz clic en un botón (o usa S / N)", align="center", font=("Courier", 12, "normal"))

    state = "gameover"
    game_over = True
    listen(); update()
    onscreenclick(handle_click)

# -------------------------
# ACCIONES DE MENÚ
# -------------------------
def set_mode(mode):
    global game_mode
    game_mode = mode
    show_color_menu()

def set_color_and_start(color):
    global snake_color, state
    snake_color = color
    state = "game"
    clear(); clear_buttons()
    update()
    move() 

# -------------------------
# REINICIO / SALIDA
# -------------------------
def restart_game():
    global food, snake, aim, score, enemies, speed, game_over, state
    if state != "gameover":
        return
    food = vector(0, 0)
    snake = [vector(10, 0)]
    aim = vector(10, 0)
    score = 0
    enemies = []
    speed = 120
    game_over = False
    state = "menu"
    show_menu()

def exit_game():
    if state != "gameover":
        return
    clear(); clear_buttons()
    penup(); goto(0, 0); color("white")
    write("Gracias por jugar", align="center", font=("Courier", 16, "normal"))
    update()
    ontimer(bye, 1500)
# -------------------------
# JUEGO
# -------------------------
def move():
    global score, speed, lose_reason, game_over
    if state != "game" or game_over:
        return

    head = snake[-1].copy()
    head.move(aim)

    # Modo Infinito (Pac-Man)
    if game_mode == "infinite":
        if head.x > 190: head.x = -190
        if head.x < -190: head.x = 190
        if head.y > 190: head.y = -190
        if head.y < -190: head.y = 190
    else:
        if not inside(head):
            square(head.x, head.y, 9, 'red')
            update()
            lose_reason = "Te saliste del tablero."
            show_restart_screen()
            return

    # Colisiones
    if head in snake:
        square(head.x, head.y, 9, 'red')
        update()
        lose_reason = "Chocaste contigo mismo."
        show_restart_screen()
        return

    if head in enemies:
        square(head.x, head.y, 9, 'red')
        update()
        lose_reason = "Un enemigo te atrapó."
        show_restart_screen()
        return

    snake.append(head)

    if head == food:
        score += 1
        food.x = randrange(-19, 19) * 10
        food.y = randrange(-19, 19) * 10
        # Aumentar velocidad en modo infinito
        if game_mode == "infinite" and speed > 40:
            speed -= 5
        # En survival, generar enemigos gradualmente
        if game_mode == "survival" and len(enemies) < 5:
            enemies.append(vector(randrange(-19, 19) * 10,
                                  randrange(-19, 19) * 10))
    else:
        snake.pop(0)

    if game_mode == "survival":
        move_enemies()

    clear()
    # --- Dibuja el borde primero ---
    draw_border()

    # Serpiente
    for body in snake:
        square(body.x, body.y, 9, snake_color)
    # Comida
    square(food.x, food.y, 9, 'green')
    # Enemigos
    if game_mode == "survival":
        for e in enemies:
            square(e.x, e.y, 9, 'red')

    # HUD
    penup(); goto(-190, 180); color("white")
    write(f"Score: {score}", font=("Courier", 14, "normal"))

    update()
    ontimer(move, speed)

# -------------------------
# MAIN (ventana y bindings)
# -------------------------
setup(420, 420, 370, 0)
screen = getscreen()
hideturtle()
screen.tracer(0)      # usamos update() manual
set_vintage_style()
listen()

# Movimiento (teclado durante el juego)
screen.onkeypress(lambda: change(10, 0), 'Right')
screen.onkeypress(lambda: change(-10, 0), 'Left')
screen.onkeypress(lambda: change(0, 10), 'Up')
screen.onkeypress(lambda: change(0, -10), 'Down')
# WASD como respaldo
screen.onkeypress(lambda: change(-10, 0), 'a')
screen.onkeypress(lambda: change(10, 0), 'd')
screen.onkeypress(lambda: change(0, 10), 'w')
screen.onkeypress(lambda: change(0, -10), 's')

# Reinicio / salida en pantalla de derrota (también clic)
screen.onkeypress(restart_game, 'S')
screen.onkeypress(restart_game, 's')
screen.onkeypress(exit_game, 'N')
screen.onkeypress(exit_game, 'n')

show_menu()
done()






