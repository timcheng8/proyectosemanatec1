from random import randrange
from turtle import *

from freegames import square, vector

colors = ['blue', 'green', 'purple', 'orange', 'brown']

food = vector(0, 0)
snake = [vector(10, 0)]
aim = vector(0, -10)
speed = 100

snake_color = choice(colors)
food_color = choice([c for c in colors if c != snake_color])

obstacle = vector(randrange(-15, 15) * 10, randrange(-15, 15) * 10)

def change(x, y):
    """Change snake direction."""
    aim.x = x
    aim.y = y

def inside(head):
    """Return True if head inside boundaries."""
    return -200 < head.x < 190 and -200 < head.y < 190

def move_food():
    direction = choice([vector(10,0), vector(-10,0), vector(0,10), vector(0,-10)])
    new_pos = food + direction
    if inside(new_pos):
        food.move(direction)
    ontimer(move_food, 500)

def move_obstacle():
    """Move obstacle to random position avoiding snake."""
global obstacle
     while True:
        new_pos = vector(randrange(-20, 15) * 10,
                         randrange(-15, 15) * 10)
        if new_pos not in snake and new_pos != food:
            obstacle = new_pos
            break
    ontimer(move_obstacle, 5000)  


def move():
    """Move snake forward one segment."""
    global speed
    head = snake[-1].copy()
    head.move(aim)

    if not inside(head) or head in snake or head == obstacle:
        square(head.x, head.y, 9, 'red')
        update()
        return

    snake.append(head)

    if head == food:
        print('Snake:', len(snake))
        food.x = randrange(-15, 15) * 10
        food.y = randrange(-15, 15) * 10
        speed = max(30, speed - 5)    #delia
    else:
        snake.pop(0)

    clear()

    for body in snake:
        square(body.x, body.y, 9, snake_color)

    square(food.x, food.y, 9, food_color)

    square(obstacle.x, obstacle.y,9,'red')

    update()
    ontimer(move, 100)


setup(420, 420, 370, 0)
hideturtle()
tracer(False)
listen()
onkey(lambda: change(10, 0), 'Right')
onkey(lambda: change(-10, 0), 'Left')
onkey(lambda: change(0, 10), 'Up')
onkey(lambda: change(0, -10), 'Down')
move_food()
move_obstacle()
move()
done()
